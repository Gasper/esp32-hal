#!/bin/bash

# port esp32 is connected to
PORT=/dev/ttyUSB0

# baud rate for programming
FLASH_BAUDRATE=115200

# baud rate for terminal
TERM_BAUDRATE=115200

# Flash Mode
FLASH_MODE="dio"

# Flash Speed
FLASH_SPEED="40m"

# Use bootloader (needed for using irom, drom and psram)
USE_BOOTLOADER=1


# debug or release build
TYPE=debug

showhelp() {
cat << EOF
Usage: flash -hrtb -p <serial port> <example>

-h, --help                      Display Help
-r, --release                   Build in release mode
-p, --port <serial port>        Set serial port (default: $PORT)
-b, --baudrate <baudrate>       Set baudrate for flasing (default: $FLASH_BAUDRATE)
  , --termbaudrate <baudrate>   Set baudrate for monitoring (default: $TERM_BAUDRATE)
-t, --terminal                  Open terminal program after flashing
EOF
}

# get command line options
options=$(getopt -l "help,release,port:,terminal,baudrate:,termbaudrate:" -o "hrp:tb:" -a -- "$@")

if [ $? -ne 0 ]; then
    echo
    showhelp
    exit 1
fi

eval set -- "$options"


while true
do
    case $1 in
    -h|--help)
        showhelp
        exit 0
        ;;
    -r|--release)
        export TYPE=release
        ;;
    -p|--port)
        shift
        export PORT=$1
        ;;
    -t|--terminal)
        export TERMINAL=1
        ;;
    -b|--baudrate)
        shift
        export FLASH_BAUDRATE=$1
        ;;
    --termbaudrate)
        shift
        export TERM_BAUDRATE=$1
        ;;
    --)
        shift
        break;;
    esac
shift
done

if [[ $# -ne 1 ]]
then
    echo "*** Wrong number of arguments" >&2
    echo
    showhelp
    exit 1
fi

# change this for release flashes
BIN_PATH=target/xtensa-esp32-none-elf/$TYPE/examples/$1

# build the specific example
if [ "$TYPE" = "release" ]
then 
    cargo xbuild --example $1 --release
else
    cargo xbuild --example $1
fi

# if cargo returned an error quit the script
if [ $? -ne 0 ]; then
    exit 1
fi

#display section sizes
echo
xtensa-esp32-elf-readelf $BIN_PATH -S|egrep 'BIT|\[Nr\]' |awk 'BEGIN {FS="[ \t\[\]]+"}  $9~/A|Flg/ {size=sprintf("%7d", "0x" $7)+0; printf("%-3s %-20s %-8s %-8s %-8s %8s %-3s %-3s\n",$2,$3,$4,$5,$7,((size>0)?size:$7),$9,$12); total+=size; } END { printf("\nTotal: %d bytes\n",total)}'
echo

# convert to bin
rm $BIN_PATH.bin 2>/dev/null
esptool.py --chip esp32 elf2image --flash_mode=$FLASH_MODE --flash_freq $FLASH_SPEED  -o $BIN_PATH.bin $BIN_PATH
esptool.py --chip esp32 image_info $BIN_PATH.bin
echo

if [ $? -ne 0 ]; then
    exit 1
fi

# kill terminal programs using the same port
ps -ef|grep $PORT|egrep -v "$0|grep" |awk '{print $2}'|xargs -r kill

if [[ USE_BOOTLOADER -eq 1 ]]
then
    # get gen_esp32part.py and create binary partition table
    curl -s -S -L -C - https://github.com/espressif/esp-idf/raw/release/v4.1/components/partition_table/gen_esp32part.py?raw=true --output target/gen_esp32part.py
    
    rm target/partitions.bin > /dev/null
    python target/gen_esp32part.py partitions.csv target/partitions.bin 

    # get bootloader.bin file (from arduino-esp32 repository)
    # (different variants exist, but only difference is flash settings which are overriden by esptool)
    curl -s -S -L -C - https://github.com/espressif/arduino-esp32/blob/idf-release/v4.0/tools/sdk/bin/bootloader_dio_40m.bin?raw=true --output target/bootloader.bin

    # check if bootloader.bin and paritions.bin are already correctly flashed (to prevent unneceesary writes)
    esptool.py --chip esp32 --port $PORT --baud $FLASH_BAUDRATE --before default_reset --after hard_reset verify_flash --flash_mode=$FLASH_MODE --flash_freq $FLASH_SPEED --flash_size detect 0x1000 target/bootloader.bin 0x8000 target/partitions.bin
    if [ $? -ne 0 ]; then
        # flash bootloader.bin, partitions.bin and application
        esptool.py --chip esp32 --port $PORT --baud $FLASH_BAUDRATE --before default_reset --after hard_reset write_flash --flash_mode=$FLASH_MODE --flash_freq $FLASH_SPEED --flash_size detect 0x1000 target/bootloader.bin 0x8000 target/partitions.bin 0x10000 $BIN_PATH.bin
    else
        # flash application only
        esptool.py --chip esp32 --port $PORT --baud $FLASH_BAUDRATE --before default_reset --after hard_reset write_flash --flash_mode=$FLASH_MODE --flash_freq $FLASH_SPEED --flash_size detect 0x10000 $BIN_PATH.bin
    fi
else
        esptool.py --chip esp32 --port $PORT --baud $FLASH_BAUDRATE --before default_reset --after hard_reset write_flash --flash_mode=$FLASH_MODE --flash_freq $FLASH_SPEED --flash_size detect 0x1000 $BIN_PATH.bin
fi



# start terminal program
if [[ TERMINAL -eq 1 ]]
then
    echo
    echo "Starting terminal"
    gnome-terminal --geometry 200x15+0+2000 -- picocom -b $TERM_BAUDRATE $PORT --imap lfcrlf 2>/dev/null
fi